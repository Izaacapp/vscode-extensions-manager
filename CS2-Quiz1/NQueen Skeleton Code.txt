class Main {
  public static int N = 8;
  /* A utility function to print solution */
void printSolution(int board[][])
{
    System.out.format("Printing in matrix format: \n");
    for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++)
			System.out.format(" %d ", board[i][j]);
		System.out.format("\n");
	}

	System.out.format("Printing in Queen format: \n");

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++)
            if (board[i][j] == 1)
                 System.out.format("Q%d ", i+1);

             // No queen here, so print a blank.
             else
                 System.out.format("_  ");
			//System.out.format(" %d ", board[i][j]);
		System.out.format("\n");
	}
}

/* check to see if it is save to put the queen in x,y position */
boolean isSafe(int board[][], int x, int y)
{
 
  
}

/* A recursive utility function to solve N
Queen problem */
boolean solveNQUtil(int N, int r, int board[][])
{
  
  
  
  
}


public void solveNQ()
{
  int i, j;
	int[][] board = new int[N][N]; //initialize all the positions to 0 by default

	if (solveNQUtil(N, 0, board) == false) {
		System.out.println("Solution does not exist");		
	}
  else
   printSolution(board);
}
  public static void main(String[] args) {

    Main m = new Main();
    m.solveNQ();

  }
}